name: BookReview Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'bookreview-frontend/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'bookreview-frontend/**'
      - '.github/workflows/ci-cd.yml'

env:
  AWS_REGION: ap-south-1
  S3_BUCKET: bookreview-frontend
  CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
  NODE_VERSION: '18'

jobs:
  # Quality checks and testing job
  test:
    name: Quality Checks & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud analysis

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'bookreview-frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./bookreview-frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./bookreview-frontend
      run: |
        npx eslint src --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-report.json || true
        npx eslint src --ext .js,.jsx,.ts,.tsx

    - name: Run TypeScript type checking
      working-directory: ./bookreview-frontend
      run: npx tsc --noEmit

    - name: Run tests with coverage
      working-directory: ./bookreview-frontend
      run: |
        npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit
      env:
        CI: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          bookreview-frontend/coverage/
          bookreview-frontend/junit.xml
          bookreview-frontend/eslint-report.json

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './bookreview-frontend/coverage/coverage-summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { total } = coverage;
            
            const comment = `## 📊 Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | Statements | ${total.statements.pct}% | ${total.statements.pct >= 85 ? '✅' : '❌'} |
            | Branches | ${total.branches.pct}% | ${total.branches.pct >= 80 ? '✅' : '❌'} |
            | Functions | ${total.functions.pct}% | ${total.functions.pct >= 85 ? '✅' : '❌'} |
            | Lines | ${total.lines.pct}% | ${total.lines.pct >= 85 ? '✅' : '❌'} |
            
            **Coverage Thresholds**: Statements ≥85%, Branches ≥80%, Functions ≥85%, Lines ≥85%
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Check coverage thresholds
      working-directory: ./bookreview-frontend
      run: |
        node -e "
        const fs = require('fs');
        const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
        const { total } = coverage;
        
        const thresholds = {
          statements: 85,
          branches: 80,
          functions: 85,
          lines: 85
        };
        
        let failed = false;
        Object.entries(thresholds).forEach(([metric, threshold]) => {
          if (total[metric].pct < threshold) {
            console.error(\`❌ \${metric} coverage \${total[metric].pct}% is below threshold \${threshold}%\`);
            failed = true;
          } else {
            console.log(\`✅ \${metric} coverage \${total[metric].pct}% meets threshold \${threshold}%\`);
          }
        });
        
        if (failed) {
          process.exit(1);
        }
        "

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'bookreview-frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./bookreview-frontend
      run: npm ci

    - name: Run npm audit
      working-directory: ./bookreview-frontend
      run: |
        npm audit --audit-level=high --json > audit-report.json || true
        npm audit --audit-level=high

    - name: Run dependency check
      working-directory: ./bookreview-frontend
      run: |
        npx license-checker --json > license-report.json || true
        echo "License check completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bookreview-frontend/audit-report.json
          bookreview-frontend/license-report.json

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'bookreview-frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./bookreview-frontend
      run: npm ci

    - name: Build application
      working-directory: ./bookreview-frontend
      run: |
        npm run build
        echo "Build completed successfully"

    - name: Analyze bundle size
      working-directory: ./bookreview-frontend
      run: |
        npx bundlesize || true
        du -sh build/static/js/*.js build/static/css/*.css || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: bookreview-frontend/build/
        retention-days: 30

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3 Staging
      run: |
        aws s3 sync build/ s3://bookreview-frontend-staging --delete
        echo "Deployed to staging environment"

    - name: Invalidate CloudFront (Staging)
      if: env.CLOUDFRONT_STAGING_DIST_ID != ''
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_STAGING_DIST_ID }} \
          --paths "/*"
      env:
        CLOUDFRONT_STAGING_DIST_ID: ${{ secrets.CLOUDFRONT_STAGING_DIST_ID }}

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3 Production
      run: |
        aws s3 sync build/ s3://${{ env.S3_BUCKET }} --delete
        echo "Deployed to production environment"

    - name: Invalidate CloudFront (Production)
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DIST_ID }} \
          --paths "/*"

    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: frontend-v${{ github.run_number }}
        release_name: Frontend Release v${{ github.run_number }}
        body: |
          ## Frontend Release v${{ github.run_number }}
          
          **Deployed to Production** 🚀
          
          ### Changes
          - Automated deployment from commit ${{ github.sha }}
          
          ### Deployment Details
          - **Environment**: Production
          - **S3 Bucket**: ${{ env.S3_BUCKET }}
          - **CloudFront**: Cache invalidated
          - **Build Time**: ${{ github.run_started_at }}
        draft: false
        prerelease: false

  # Performance and accessibility tests (optional, runs on schedule)
  performance:
    name: Performance & Accessibility Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './bookreview-frontend/.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: .lighthouseci/