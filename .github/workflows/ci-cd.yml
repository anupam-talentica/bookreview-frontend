name: BookReview Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests and security checks'
        required: false
        default: false
        type: boolean
      deploy_only:
        description: 'Skip build and deploy existing artifacts'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  S3_BUCKET: bookreview-frontend
  CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
  NODE_VERSION: '18'

jobs:
  # Quality checks and testing job
  test:
    name: Quality Checks & Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests && !inputs.deploy_only }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: |
        npx eslint src --format=json --output-file=eslint-report.json || true
        npx eslint src
      continue-on-error: true

    - name: Run TypeScript type checking
      run: npx tsc --noEmit

    - name: Run tests
      run: |
        npm test -- --coverage --watchAll=false --ci --testTimeout=10000
      env:
        CI: true
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          eslint-report.json

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './coverage/coverage-summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { total } = coverage;
            
            const comment = `## üìä Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct}% |
            | Branches | ${total.branches.pct}% |
            | Functions | ${total.functions.pct}% |
            | Lines | ${total.lines.pct}% |
            
            View detailed coverage report in the artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ‚ö†Ô∏è Test Coverage Report\n\nNo coverage report generated. Please check the test execution logs.'
            });
          }

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !inputs.skip_tests && !inputs.deploy_only && !failure() }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > audit-report.json || true
        npm audit --audit-level=high || echo "Security vulnerabilities found, but continuing..."
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: audit-report.json

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: ${{ !inputs.deploy_only && !failure() }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        # Build for production by default
        npm run build
        echo "‚úÖ Build completed successfully"
      env:
        NODE_ENV: production

    - name: Analyze bundle size
      run: |
        echo "üì¶ Bundle Analysis:"
        if [ -d "dist/assets" ]; then
          echo "JavaScript bundles:"
          ls -lh dist/assets/*.js 2>/dev/null || echo "No JS files found"
          echo "CSS bundles:"
          ls -lh dist/assets/*.css 2>/dev/null || echo "No CSS files found"
        fi
        
        # Check total build size
        if [ -d "dist" ]; then
          echo "Total build size:"
          du -sh dist/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  # Deploy to staging (on develop branch or manual trigger)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() && ((github.ref == 'refs/heads/develop' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')) && (needs.build.result == 'success' || inputs.deploy_only) }}
    environment: staging
    
    steps:
    - name: Download build artifacts (from current run)
      if: ${{ !inputs.deploy_only }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Checkout code (for deploy-only mode)
      if: ${{ inputs.deploy_only }}
      uses: actions/checkout@v4
      
    - name: Download latest build artifacts (deploy-only mode)
      if: ${{ inputs.deploy_only }}
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ci-cd.yml
        name: build-artifacts
        path: dist/
        if_no_artifact_found: fail

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build for Staging (if needed)
      if: ${{ inputs.deploy_only != true }}
      run: |
        echo "üîÑ Building for staging environment..."
        npm run build
        echo "‚úÖ Staging build completed"
      env:
        NODE_ENV: production
        VITE_API_BASE_URL: http://dev-bookreview-alb-516113639.ap-south-1.elb.amazonaws.com/api

    - name: Deploy to S3 Staging
      run: |
        aws s3 sync dist/ s3://bookreview-frontend-staging --delete
        echo "‚úÖ Deployed to staging environment"

    - name: Invalidate CloudFront (Staging)
      env:
        CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_STAGING_DIST_ID }}
      run: |
        if [ -n "$CLOUDFRONT_DIST_ID" ]; then
          echo "üîÑ Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DIST_ID \
            --paths "/*"
          echo "‚úÖ CloudFront cache invalidated"
        else
          echo "‚ö†Ô∏è CloudFront distribution ID not configured, skipping cache invalidation"
        fi

  # Deploy to production (on main branch or manual trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() && ((github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')) && (needs.build.result == 'success' || inputs.deploy_only) }}
    environment: production
    
    steps:
    - name: Download build artifacts (from current run)
      if: ${{ !inputs.deploy_only }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Checkout code (for deploy-only mode)
      if: ${{ inputs.deploy_only }}
      uses: actions/checkout@v4
      
    - name: Download latest build artifacts (deploy-only mode)
      if: ${{ inputs.deploy_only }}
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: ci-cd.yml
        name: build-artifacts
        path: dist/
        if_no_artifact_found: fail

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build for Production (if needed)
      if: ${{ inputs.deploy_only != true }}
      run: |
        echo "üîÑ Building for production environment..."
        npm run build
        echo "‚úÖ Production build completed"
      env:
        NODE_ENV: production
        VITE_API_BASE_URL: http://dev-bookreview-alb-516113639.ap-south-1.elb.amazonaws.com/api

    - name: Deploy to S3 Production
      run: |
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete
        echo "‚úÖ Deployed to production environment"

    - name: Invalidate CloudFront (Production)
      env:
        CLOUDFRONT_DIST_ID: ${{ env.CLOUDFRONT_DIST_ID }}
      run: |
        if [ -n "$CLOUDFRONT_DIST_ID" ]; then
          echo "üîÑ Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DIST_ID \
            --paths "/*"
          echo "‚úÖ CloudFront cache invalidated"
        else
          echo "‚ö†Ô∏è CloudFront distribution ID not configured, skipping cache invalidation"
        fi

    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Frontend Release v${{ github.run_number }}
        body: |
          ## üöÄ Frontend Release v${{ github.run_number }}
          
          **Deployed to Production**
          
          ### üìã Changes
          - Automated deployment from commit ${{ github.sha }}
          
          ### üîß Deployment Details
          - **Environment**: Production
          - **S3 Bucket**: ${{ env.S3_BUCKET }}
          - **CloudFront**: Cache invalidated
          - **Build Time**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: [${{ github.sha }}](${{ github.event.head_commit.url }})
        draft: false
        prerelease: false