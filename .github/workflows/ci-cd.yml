name: BookReview Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: ap-south-1
  S3_BUCKET: bookreview-frontend
  CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
  NODE_VERSION: '18'

jobs:
  # Quality checks and testing job
  test:
    name: Quality Checks & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: |
        npx eslint src --format=json --output-file=eslint-report.json || true
        npx eslint src
      continue-on-error: true

    - name: Run TypeScript type checking
      run: npx tsc --noEmit

    - name: Run tests
      run: |
        npm test -- --coverage --watchAll=false --ci --testTimeout=10000
      env:
        CI: true
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          eslint-report.json

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './coverage/coverage-summary.json';
          
          if (fs.existsSync(path)) {
            const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
            const { total } = coverage;
            
            const comment = `## 📊 Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct}% |
            | Branches | ${total.branches.pct}% |
            | Functions | ${total.functions.pct}% |
            | Lines | ${total.lines.pct}% |
            
            View detailed coverage report in the artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ⚠️ Test Coverage Report\n\nNo coverage report generated. Please check the test execution logs.'
            });
          }

  # Security and dependency checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=high --json > audit-report.json || true
        npm audit --audit-level=high || echo "Security vulnerabilities found, but continuing..."
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: audit-report.json

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        npm run build
        echo "✅ Build completed successfully"

    - name: Analyze bundle size
      run: |
        echo "📦 Bundle Analysis:"
        if [ -d "build/static/js" ]; then
          echo "JavaScript bundles:"
          ls -lh build/static/js/*.js 2>/dev/null || echo "No JS files found"
        fi
        if [ -d "build/static/css" ]; then
          echo "CSS bundles:"
          ls -lh build/static/css/*.css 2>/dev/null || echo "No CSS files found"
        fi
        
        # Check total build size
        if [ -d "build" ]; then
          echo "Total build size:"
          du -sh build/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
        retention-days: 30

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3 Staging
      run: |
        aws s3 sync build/ s3://bookreview-frontend-staging --delete
        echo "✅ Deployed to staging environment"

    - name: Invalidate CloudFront (Staging)
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_STAGING_DIST_ID }} \
          --paths "/*"
        echo "✅ CloudFront cache invalidated"
      continue-on-error: true

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3 Production
      run: |
        aws s3 sync build/ s3://${{ env.S3_BUCKET }} --delete
        echo "✅ Deployed to production environment"

    - name: Invalidate CloudFront (Production)
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DIST_ID }} \
          --paths "/*"
        echo "✅ CloudFront cache invalidated"

    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Frontend Release v${{ github.run_number }}
        body: |
          ## 🚀 Frontend Release v${{ github.run_number }}
          
          **Deployed to Production**
          
          ### 📋 Changes
          - Automated deployment from commit ${{ github.sha }}
          
          ### 🔧 Deployment Details
          - **Environment**: Production
          - **S3 Bucket**: ${{ env.S3_BUCKET }}
          - **CloudFront**: Cache invalidated
          - **Build Time**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: [${{ github.sha }}](${{ github.event.head_commit.url }})
        draft: false
        prerelease: false